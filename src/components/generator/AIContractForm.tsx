/* eslint-disable react-hooks/exhaustive-deps */
"use client";

import {
    Box,
    Button,
    Flex,
    FormControl,
    Input,
    Select,
    Spinner,
    Text,
    useBreakpointValue,
    useToast,
} from "@chakra-ui/react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { QuestionType } from "@/views/generator/Generator";
import {
    getGeneratorQuestions,
    postGeneratorQuestions,
} from "@/actions/generator";
import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";

type Question = {
    id: number;
    question: string;
    field_type: "str" | "date" | "int";
};

export const AIContractForm = ({
    questionTypes,
}: {
    questionTypes: QuestionType[];
}) => {
    const isMobile = useBreakpointValue({ sm: true, md: false, lg: false });
    const toast = useToast();
    const router = useRouter();
    const { data: session } = useSession();
    const [questions, setQuestions] = useState<Question[]>([]);
    const [isLoading, setIsLoading] = useState(false);

    const { handleSubmit, register, watch, getValues, setValue } = useForm({});

    useEffect(() => {
        const getData = async () => {
            setIsLoading(true);
            const data = await getGeneratorQuestions(
                session?.tokens?.access || "",
                watch("type")
            );

            if (data) setQuestions(data);
            setIsLoading(false);
        };

        getData();
    }, [session?.tokens?.access, watch("type")]);

    const onSubmit = async (data: any) => {
        const response = await postGeneratorQuestions(
            session?.tokens?.access || "",
            data
        );

        if (response) {
            toast({
                description: "Contract has been created successfully",
                position: "top",
                status: "success",
                duration: 3000,
                isClosable: false,
            });
        } else {
            toast({
                description: `Failed to create contract`,
                position: "top",
                status: "error",
                duration: 3000,
                isClosable: false,
            });
        }
    };

    const InputComponent = ({
        field_type,
        questionId,
    }: {
        field_type: "str" | "date" | "int";
        questionId: string | number;
    }) => {
        if (field_type === "str")
            return (
                <Input
                    type="text"
                    {...register(String(questionId))}
                    bgColor="white"
                    borderColor="#c4cfe5"
                    borderRadius={"8px"}
                />
            );
    };

    return (
        <Box
            height="100%"
            m="50px 10%"
            p="40px"
            backgroundColor="white"
            borderRadius="8px"
        >
            <Flex direction="column" gap="5px">
                <Text fontWeight="bold" fontSize="24px">
                    Main Questions
                </Text>
                <Text>
                    To create a contract generated by AI, please answer the main
                    questions.
                </Text>

                <form
                    onSubmit={handleSubmit(onSubmit)}
                    style={{
                        marginTop: "50px",
                        display: "flex",
                        flexDirection: "column",
                        gap: "30px",
                    }}
                >
                    <FormControl
                        flexGrow="1"
                        w="100%"
                        display="flex"
                        flexDirection="column"
                        gap="10px"
                    >
                        <Text fontWeight="600" fontSize="18px">
                            Contract Type
                        </Text>
                        <Select
                            {...register("type")}
                            bgColor="white"
                            borderColor="#c4cfe5"
                            placeholder="Select type"
                            borderRadius={"8px"}
                        >
                            {questionTypes.map(({ id, name }, index) => (
                                <option key={index + id + name} value={id}>
                                    {name}
                                </option>
                            ))}
                        </Select>
                    </FormControl>

                    {isLoading ? (
                        <Spinner margin="auto" />
                    ) : (
                        questions.map(({ id, question, field_type }, index) => (
                            <FormControl
                                key={index + id}
                                flexGrow="1"
                                w="100%"
                                display="flex"
                                flexDirection="column"
                                gap="10px"
                            >
                                <Text fontWeight="600" fontSize="18px">
                                    {question}
                                </Text>
                                <InputComponent
                                    field_type={field_type}
                                    questionId={id}
                                />
                            </FormControl>
                        ))
                    )}

                    <Flex gap="20px" marginLeft="auto">
                        <Button
                            onClick={() => {
                                router.push("/dashboard/contracts");
                            }}
                        >
                            Cancel
                        </Button>
                        <Button
                            variant="solid"
                            background="#287AE0"
                            color="white"
                            type="submit"
                            onClick={() => {}}
                        >
                            Save
                        </Button>
                    </Flex>
                </form>
            </Flex>
        </Box>
    );
};
